<?xml version="1.0" encoding="utf-8"?>
<document>
 <author>
  Analysis by Gregory Krieg, ('Edition CNN',)
 </author>
 <date>
  2018-01-18T22:14:25+00:00
 </date>
 <article>
<t>
 Donald Trump's dealmaking mythology meets DC reality. Again.
</t>
<d>
 For his entire adult life, and with special vigor during the 2016 campaign, President Donald Trump has insisted on his skills as a master negotiator.
</d>
<p>
 As a candidate, Trump routinely diminished (or, in some cases, accurately assessed the shortcomings) of his opponents' negotiating prowess. During a primary debate, he mocked Ted Cruz's penchant for Senate floor showmanship, dismissing it as mere sound and fury.
</p>
<p>
 That someone, Trump promised, would be him.
</p>
<p>
 A couple of years earlier, during the 2013 government shutdown, Trump sized up then-President Barack Obama
</p>
<p>
 Later in the interview, he offered this telling nugget -- one you might hear, in a different key, from Democrats in 2018 -- on the prospect of a short-term deal to end that impasse.
</p>
<p>
 "Now, maybe as we're speaking, they're going to make a deal where they do some kind of an extension, but an extension is not what you need," he said. "You need the overall deal. We have to make a big deal and it has to be the proper deal for the country."
</p>
<p>
 More than four years later, one of the core stated rationales underlying Trump's pitch to voters is looking flimsy. At best. We know he enjoys the process -- the banter, the debate, the fighting -- of trying to hammer out an agreement. But his ability to close those deals, as President, has been sorely lacking. Even his most significant legislative achievement, the GOP's tax bill, was sealed by Majority Leader Mitch McConnell without even a note of bipartisan support. Republican efforts to gut Obamacare collapsed under the weight of internal dissent -- and confusion stoked by Trump's shifting positions on the legislation at hand.
</p>
<p>
 Trump's most notable work on the deal front has focused on busting or damaging them, as he did with the Trans-Pacific Partnership (a massive bipartisan trade deal that other Asian countries are now renegotiating without the US), the Paris climate accord (by withdrawing the US) and the Iran nuclear deal (by threatening to reimpose sanctions on Tehran).
</p>
<p>
 "We'll see what happens," Trump told Reuters this week. "I may terminate NAFTA."
</p>
<p>
 We'll see, indeed.
</p>
<p>
 Now, with with less than two days to go before the government runs out money, fellow Republicans are once again being frustrated by a combination of Democratic solidarity and Trump's conflicting statements. It's tough to negotiate -- or align yourself -- with someone whose baseline priorities shift daily, as Trump's have on issues as varied as "the wall," the Children's Health Insurance Program and the futures of hundreds of thousands of undocumented immigrants who have been protected by the expiring Deferred Action for Childhood Arrivals program. On all three subjects, Trump has publicly vacillated.
</p>
<p>
 On Wednesday, with the clock ticking down, a clearly frustrated McConnell called out Trump for complicating an already tenuous negotiation.
</p>
<p>
 "I'm looking for something that President Trump supports," he said. "And he's not yet indicated what measure he's willing to sign. As soon as we figure out what he is for, then I would be convinced that we were not just spinning our wheels going to this issue on the floor, but actually dealing with a bill that has a chance to become law and therefore solve the problem."
</p>
<p>
 <em>
  Here's a look at party breakdowns during past shutdowns:
 </em>
</p>
<p>
 Even as Trump tweets out conflicting views on what an acceptable deal might look like -- this, after previously saying he'd sign whatever came to his desk -- a small group of senators remain hard at work trying to hammer out some kind of agreement to break the deadlock.
</p>
<p>
 Their incentives, though, are quickly moving in favor of Democrats' demands, as Democratic members' backs are being stiffened by favorable winds -- and a belief that Republicans would be the ones to suffer politically if nothing is agreed.
</p>
<p>
 There is a vast and diverse set of circumstances, many pre-dating Trump's arrival in Washington, that led Congress to this latest cliff. But the President has only pushed them closer to the precipice. His reported "shithole countries" comment and subsequent back-and-forth with himself over what precisely he said, was a drain on Republican time and credibility. It also handcuffed Democrats, making it more difficult for them to accept anything other than total victory in their showdown with a White House many of their supporters now openly regard as a racist.
</p>
<p>
 Speaking to CNN's Manu Raju on Thursday afternoon, a Democrat described the mood among the party's Senate caucus as "resolute," "determined" and "united." On the other side, Republicans like Lindsey Graham, Mike Rounds and Rand Paul have indicated they will not support a month-long continuing resolution, potentially lumping them in with those Democrats, all but guaranteeing a shutdown in the absence of a long-term deal.
</p>
<p>
 As the clock ticks down, Trump visited Pennsylvania to promote the new tax law and stump, unofficially, for a Republican congressional candidate at risk of losing a GOP-held seat in an upcoming special election.
</p>
<p>
 Then, on Friday, it's off again to Mar-a-lago -- at least, that's the plan. The "art" of this deal is getting more complicated by the hour.
</p>
<p>
 "Deals are my art form," he tweeted in December 2014. "Other people paint beautifully or write poetry. I like making deals, preferably big deals. That's how I get my kicks."
</p>
 </article>
 <annotations>
  b''
 </annotations>
</document>