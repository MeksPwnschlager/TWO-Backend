<?xml version="1.0" encoding="utf-8"?>
<document>
 <author>
  Lauren Fox and Phil Mattingly, ('Edition CNN',)
 </author>
 <date>
  2018-01-18T18:16:01+00:00
 </date>
 <article>
<t>
 Shutdown looms larger in Senate after House vote
</t>
<d>
 The Senate is bracing for a potential shutdown.
</d>
<p>
 "I want to keep the government open," West Virginia Democratic Sen. Joe Manchin said earlier this week. "I'm just going to work and work and work to keep the government open."
</p>
<p>
 On the Senate floor, Minority Leader Chuck Schumer pitched a very short term continuing resolution, to give senators a few more days to work through their differences, unlike the plan passed out of the House that keeps the government running until mid February, but initial reactions to that idea from McConnell's aides were skeptical, CNN reported.
</p>
<p>
 In one sign of good news for McConnell, Sen. Mike Rounds, a South Dakota Republican who had told CNN earlier Thursday that he would not vote for the bill, told reporters he would now support it, following assurances from GOP leadership that defense appropriations would have regular order.
</p>
<p>
 Many Democrats pinned their frustration with the House-passed CR on the fact that the bill did nothing to protect hundreds of thousands of recipients of DACA, the Deferred Action for Childhood Arrivals program, which expires on March 5.
</p>
<p>
 ".@realDonaldTrump created a crisis on #DACA and destroyed a bipartisan solution. #Dreamers belong here. I will vote NO on this spending bill because it does not put them on a pathway to citizenship," Sen. Catherine Cortez Masto of Nevada tweeted Thursday night.
</p>
<p>
 Democrats weren't the only ones angry about the process. Sen. Jeff Flake, an Arizona Republican, said he was also frustrated citing the handling of DACA. He said he would support a continuing resolution to keep the government funded for a few days, but that a longer term one -- like the one in the House-passed proposal -- he would have a hard time supporting.
</p>
<p>
 "I can't see voting yes on cloture," Flake told reporters.
</p>
<p>
 Others -- including Sen. Angus King, an independent from Maine -- said they were tired of continuing resolutions in general.
</p>
<p>
 "We have to close this escape hatch and stop voting for CRs and tell leadership they have to make their deals and then we will get it done," King said. "I'd vote for one for a few days to do the paperwork, but to kick it down the road for another month, we're not going to know anything then that we don't know now."
</p>
<p>
 But, Republicans had also included a six-year re-authorization of the Children's Health Insurance Program in their short-term spending package, a maneuver they'd hoped would pressure Democrats to avert a government shutdown.
</p>
<p>
 Still, McConnell was drawing up contingency plans to keep the Senate in session through the weekend if Senate Democrats block a short-term spending bill before the Friday deadline, according to two GOP aides. Senate Republican leaders were working through scenarios that could force Democrats up for re-election in 2018 to take politically challenging votes for days after the missed deadline.
</p>
<p>
 The plans serve in part as a threat to Democrats, who have grown increasingly willing to keep McConnell from the 60 votes he would need to pass a short-term funding bill and avoid a shutdown.
</p>
<p>
 But, McConnell also has problems with his own members. Sen. Lindsey Graham, a Republican from South Carolina  threatened to vote against a short-term spending bill, as did Rand Paul of Kentucky.
</p>
<p>
 Many Democrats have kept their options open in part because it was unclear if House Speaker Paul Ryan and his lieutenants would even have the votes in their Republican conference to pass a short-term spending bill out of the House as they did Thursday.
</p>
 </article>
 <annotations>
  b''
 </annotations>
</document>