<?xml version="1.0" encoding="utf-8"?>
<document>
 <author>
  Ellie Kaufman, ('Edition CNN',)
 </author>
 <date>
  2018-05-01T23:48:29+00:00
 </date>
 <article>
<t>
 Kentucky, Indiana latest states to report hepatitis A outbreaks
</t>
<d>
 Kentucky health officials have identified 400 cases of hepatitis A since August. Indiana health officials have identified 76 cases since November, 69 of them this year alone.
</d>
<p>
 No cases have resulted in deaths in Indiana, but there have been three in Kentucky this year.
</p>
<p>
 Both states see an average of about 20 cases of hepatitis in a typical year, health officials said.
</p>
<p>
 While both states are taking measures to address the problem, the number of cases continues to rise. In Kentucky, almost 120 cases were identified in March and another 80 in April. In Indiana, 39 cases were diagnosed in March, and about 13 cases a week were diagnosed in April.
</p>
<p>
 Hepatitis A is a highly contagious live disease. The virus is found in the feces of people with the disease and is most frequently transmitted by eating food or drinking water handled by someone who has not properly washed their hands. It's also transmitted by sex and by illicit drug use.
</p>
<p>
 The most common symptoms include nausea, vomiting, fever, fatigue, loss of appetite and jaundice, or yellowing of the skin or eyes. It can take 15 to 50 days for symptoms to appear; however, an infected person is most contagious during the two weeks before their skin turns yellow.
</p>
<p>
 In both Indiana and Kentucky, officials said they have seen an increased number of hepatitis A cases among people who are homeless and those using drugs. Indiana has also seen increased number of cases in people who had been incarcerated.
</p>
<p>
 <h3>
  Outbreaks across the country
 </h3>
</p>
<p>
 Testing shows a connection between some of the outbreaks. In Kentucky, several cases of hepatitis A show a virus strain that is genetically linked to the outbreaks in California and Utah, according to a state Department for Public Health report. In Indiana, the genotype found in two hepatitis A cases matches the genotype in ongoing outbreaks in Arizona, Kentucky, California, Michigan and Utah, according to the state Department of Health.
</p>
<p>
 <h3>
  Attempts at prevention
 </h3>
</p>
<p>
 Both Kentucky and Indiana are trying to get a handle on the outbreaks. While doctors are identifying cases, state officials are working to provide both the public and health care workers with information and resources to fight the spread of the virus.
</p>
<p>
 Indiana's health department is providing hepatitis vaccines to high-risk groups, like people who are homeless or use drugs. Officials have distributed 5,000 vaccines to these populations in the past few months, said Pam Potones, deputy state health commissioner.
</p>
<p>
 Indiana didn't require vaccination for school entry until 2014, so many adults may not be unvaccinated, Potones said.
</p>
<p>
 Kentucky's health department is recommending that the vaccine be a requirement for school entry in the upcoming year. It is also providing vaccines to at-risk populations through public health initiatives like syringe exchange programs and community vaccination events, according to Kentucky Cabinet for Health and Family Services spokeswoman Barbara Fox.
</p>
<p>
 Though a food transmitter has not been identified in the outbreaks in Kentucky or Indiana, food is one of the most common ways the virus is spread. Indiana's health department has provided information to every food establishment in the state on how to prevent outbreaks and what to look for in people who may have the virus.
</p>
 </article>
 <annotations>
  b'gANjZ29vZ2xlLmNsb3VkLmxhbmd1YWdlX3YxLnR5cGVzCkFubm90YXRlVGV4dFJlc3BvbnNlCnEAKVJxAX1xAlgKAAAAc2VyaWFsaXplZHEDQtF+AAAKqwEKnAEKmQE8dD5LZW50dWNreSwgSW5kaWFuYSBsYXRlc3Qgc3RhdGVzIHRvIHJlcG9ydCBoZXBhdGl0aXMgQSBvdXRicmVha3M8L3Q+PGQ+S2VudHVja3kgaGVhbHRoIG9mZmljaWFscyBoYXZlIGlkZW50aWZpZWQgNDAwIGNhc2VzIG9mIGhlcGF0aXRpcyBBIHNpbmNlIEF1Z3VzdC4SChUzMzM/HTMzM78KZgpiCl1JbmRpYW5hIGhlYWx0aCBvZmZpY2lhbHMgaGF2ZSBpZGVudGlmaWVkIDc2IGNhc2VzIHNpbmNlIE5vdmVtYmVyLCA2OSBvZiB0aGVtIHRoaXMgeWVhciBhbG9uZS4QmgESAAp3CmkKZDwvZD48cD5ObyBjYXNlcyBoYXZlIHJlc3VsdGVkIGluIGRlYXRocyBpbiBJbmRpYW5hLCBidXQgdGhlcmUgaGF2ZSBiZWVuIHRocmVlIGluIEtlbnR1Y2t5IHRoaXMgeWVhci4Q+QESChUAAAA/HQAAAL8KfQpvCmo8L3A+PHA+Qm90aCBzdGF0ZXMgc2VlIGFuIGF2ZXJhZ2Ugb2YgYWJvdXQgMjAgY2FzZXMgb2YgaGVwYXRpdGlzIGluIGEgdHlwaWNhbCB5ZWFyLCBoZWFsdGggb2ZmaWNpYWxzIHNhaWQuEN4CEgoVzcxMPx3NzEy/Cn4KcAprPC9wPjxwPldoaWxlIGJvdGggc3RhdGVzIGFyZSB0YWtpbmcgbWVhc3VyZXMgdG8gYWRkcmVzcyB0aGUgcHJvYmxlbSwgdGhlIG51bWJlciBvZiBjYXNlcyBjb250aW51ZXMgdG8gcmlzZS4QyQMSChUzMzM/HTMzM78KWApUCk9JbiBLZW50dWNreSwgYWxtb3N0IDEyMCBjYXNlcyB3ZXJlIGlkZW50aWZpZWQgaW4gTWFyY2ggYW5kIGFub3RoZXIgODAgaW4gQXByaWwuELUEEgAKaQplCmBJbiBJbmRpYW5hLCAzOSBjYXNlcyB3ZXJlIGRpYWdub3NlZCBpbiBNYXJjaCwgYW5kIGFib3V0IDEzIGNhc2VzIGEgd2VlayB3ZXJlIGRpYWdub3NlZCBpbiBBcHJpbC4QhQUSAApACjwKNzwvcD48cD5IZXBhdGl0aXMgQSBpcyBhIGhpZ2hseSBjb250YWdpb3VzIGxpdmUgZGlzZWFzZS4Q5gUSAArPAQrAAQq6AVRoZSB2aXJ1cyBpcyBmb3VuZCBpbiB0aGUgZmVjZXMgb2YgcGVvcGxlIHdpdGggdGhlIGRpc2Vhc2UgYW5kIGlzIG1vc3QgZnJlcXVlbnRseSB0cmFuc21pdHRlZCBieSBlYXRpbmcgZm9vZCBvciBkcmlua2luZyB3YXRlciBoYW5kbGVkIGJ5IHNvbWVvbmUgd2hvIGhhcyBub3QgcHJvcGVybHkgd2FzaGVkIHRoZWlyIGhhbmRzLhCeBhIKFc3MTD8dzcxMvwrUAQrFAQq/AUl0J3MgYWxzbyB0cmFuc21pdHRlZCBieSBzZXggYW5kIGJ5IGlsbGljaXQgZHJ1ZyB1c2UuPC9wPjxwPlRoZSBtb3N0IGNvbW1vbiBzeW1wdG9tcyBpbmNsdWRlIG5hdXNlYSwgdm9taXRpbmcsIGZldmVyLCBmYXRpZ3VlLCBsb3NzIG9mIGFwcGV0aXRlIGFuZCBqYXVuZGljZSwgb3IgeWVsbG93aW5nIG9mIHRoZSBza2luIG9yIGV5ZXMuENkHEgoVZmZmPx1mZma/CsoCCrsCCrUCSXQgY2FuIHRha2UgMTUgdG8gNTAgZGF5cyBmb3Igc3ltcHRvbXMgdG8gYXBwZWFyOyBob3dldmVyLCBhbiBpbmZlY3RlZCBwZXJzb24gaXMgbW9zdCBjb250YWdpb3VzIGR1cmluZyB0aGUgdHdvIHdlZWtzIGJlZm9yZSB0aGVpciBza2luIHR1cm5zIHllbGxvdy48L3A+PHA+SW4gYm90aCBJbmRpYW5hIGFuZCBLZW50dWNreSwgb2ZmaWNpYWxzIHNhaWQgdGhleSBoYXZlIHNlZW4gYW4gaW5jcmVhc2VkIG51bWJlciBvZiBoZXBhdGl0aXMgQSBjYXNlcyBhbW9uZyBwZW9wbGUgd2hvIGFyZSBob21lbGVzcyBhbmQgdGhvc2UgdXNpbmcgZHJ1Z3MuEJkJEgoVzcxMPx3NzEy/CmcKWQpUSW5kaWFuYSBoYXMgYWxzbyBzZWVuIGluY3JlYXNlZCBudW1iZXIgb2YgY2FzZXMgaW4gcGVvcGxlIHdobyBoYWQgYmVlbiBpbmNhcmNlcmF0ZWQuEM8LEgoVmpmZPh2amZk+Cn8KcQpsPC9wPjxwPjxoMz5PdXRicmVha3MgYWNyb3NzIHRoZSBjb3VudHJ5PC9oMz48L3A+PHA+VGVzdGluZyBzaG93cyBhIGNvbm5lY3Rpb24gYmV0d2VlbiBzb21lIG9mIHRoZSBvdXRicmVha3MuEKQMEgoVAAAAPx0AAAC/CtABCsEBCrsBSW4gS2VudHVja3ksIHNldmVyYWwgY2FzZXMgb2YgaGVwYXRpdGlzIEEgc2hvdyBhIHZpcnVzIHN0cmFpbiB0aGF0IGlzIGdlbmV0aWNhbGx5IGxpbmtlZCB0byB0aGUgb3V0YnJlYWtzIGluIENhbGlmb3JuaWEgYW5kIFV0YWgsIGFjY29yZGluZyB0byBhIHN0YXRlIERlcGFydG1lbnQgZm9yIFB1YmxpYyBIZWFsdGggcmVwb3J0LhCRDRIKFTMzMz8dMzMzvwrMAgq9Agq3AkluIEluZGlhbmEsIHRoZSBnZW5vdHlwZSBmb3VuZCBpbiB0d28gaGVwYXRpdGlzIEEgY2FzZXMgbWF0Y2hlcyB0aGUgZ2Vub3R5cGUgaW4gb25nb2luZyBvdXRicmVha3MgaW4gQXJpem9uYSwgS2VudHVja3ksIENhbGlmb3JuaWEsIE1pY2hpZ2FuIGFuZCBVdGFoLCBhY2NvcmRpbmcgdG8gdGhlIHN0YXRlIERlcGFydG1lbnQgb2YgSGVhbHRoLjwvcD48cD48aDM+QXR0ZW1wdHMgYXQgcHJldmVudGlvbiA8L2gzPjwvcD48cD5Cb3RoIEtlbnR1Y2t5IGFuZCBJbmRpYW5hIGFyZSB0cnlpbmcgdG8gZ2V0IGEgaGFuZGxlIG9uIHRoZSBvdXRicmVha3MuEM0OEgoVzcxMPx3NzEy/CssCCrwCCrYCV2hpbGUgZG9jdG9ycyBhcmUgaWRlbnRpZnlpbmcgY2FzZXMsIHN0YXRlIG9mZmljaWFscyBhcmUgd29ya2luZyB0byBwcm92aWRlIGJvdGggdGhlIHB1YmxpYyBhbmQgaGVhbHRoIGNhcmUgd29ya2VycyB3aXRoIGluZm9ybWF0aW9uIGFuZCByZXNvdXJjZXMgdG8gZmlnaHQgdGhlIHNwcmVhZCBvZiB0aGUgdmlydXMuPC9wPjxwPkluZGlhbmEncyBoZWFsdGggZGVwYXJ0bWVudCBpcyBwcm92aWRpbmcgaGVwYXRpdGlzIHZhY2NpbmVzIHRvIGhpZ2gtcmlzayBncm91cHMsIGxpa2UgcGVvcGxlIHdobyBhcmUgaG9tZWxlc3Mgb3IgdXNlIGRydWdzLhCFERIKFWZmZj8dZmZmvwqVAQqQAQqKAU9mZmljaWFscyBoYXZlIGRpc3RyaWJ1dGVkIDUsMDAwIHZhY2NpbmVzIHRvIHRoZXNlIHBvcHVsYXRpb25zIGluIHRoZSBwYXN0IGZldyBtb250aHMsIHNhaWQgUGFtIFBvdG9uZXMsIGRlcHV0eSBzdGF0ZSBoZWFsdGggY29tbWlzc2lvbmVyLhC8ExIACo0CCv4BCvgBPC9wPjxwPkluZGlhbmEgZGlkbid0IHJlcXVpcmUgdmFjY2luYXRpb24gZm9yIHNjaG9vbCBlbnRyeSB1bnRpbCAyMDE0LCBzbyBtYW55IGFkdWx0cyBtYXkgbm90IGJlIHVudmFjY2luYXRlZCwgUG90b25lcyBzYWlkLjwvcD48cD5LZW50dWNreSdzIGhlYWx0aCBkZXBhcnRtZW50IGlzIHJlY29tbWVuZGluZyB0aGF0IHRoZSB2YWNjaW5lIGJlIGEgcmVxdWlyZW1lbnQgZm9yIHNjaG9vbCBlbnRyeSBpbiB0aGUgdXBjb21pbmcgeWVhci4QxxQSChUAAAA/HQAAAL8KggIK8wEK7QFJdCBpcyBhbHNvIHByb3ZpZGluZyB2YWNjaW5lcyB0byBhdC1yaXNrIHBvcHVsYXRpb25zIHRocm91Z2ggcHVibGljIGhlYWx0aCBpbml0aWF0aXZlcyBsaWtlIHN5cmluZ2UgZXhjaGFuZ2UgcHJvZ3JhbXMgYW5kIGNvbW11bml0eSB2YWNjaW5hdGlvbiBldmVudHMsIGFjY29yZGluZyB0byBLZW50dWNreSBDYWJpbmV0IGZvciBIZWFsdGggYW5kIEZhbWlseSBTZXJ2aWNlcyBzcG9rZXN3b21hbiBCYXJiYXJhIEZveC4QwBYSChWamZk+HZqZmT4KrwEKoAEKmgE8L3A+PHA+VGhvdWdoIGEgZm9vZCB0cmFuc21pdHRl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EQoNCgh2YWNjaW5lcxDVFhACGioKC3BvcHVsYXRpb25zEAcl0WnzOioUChAKC3BvcHVsYXRpb25zEOkWEAIaJgoJb3V0YnJlYWtzEAclJPXxOioSCg4KCW91dGJyZWFrcxDuGBACGh4KBXN0YXRlEAIl9c/xOioOCgoKBXN0YXRlEKEaEAIaIgoHVGVzdGluZxAHJRAF7ToqEAoMCgdUZXN0aW5nENcMEAIaiQEKCkNhbGlmb3JuaWEQAho5Cg13aWtpcGVkaWFfdXJsEihodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DYWxpZm9ybmlhGg8KA21pZBIIL20vMDFuN3ElBnPYOioTCg8KCkNhbGlmb3JuaWEQ/g0QASoTCg8KCkNhbGlmb3JuaWEQxQ8QARpxCgRVdGFoEAIaDwoDbWlkEggvbS8wN3NydxozCg13aWtpcGVkaWFfdXJsEiJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9VdGFoJQZz2DoqDQoJCgRVdGFoEI0OEAEqDQoJCgRVdGFoEN4PEAEaRgoZc3lyaW5nZSBleGNoYW5nZSBwcm9ncmFtcxAHJbzK1ToqIgoeChlzeXJpbmdlIGV4Y2hhbmdlIHByb2dyYW1zEJwXEAIaKgoLaW5pdGlhdGl2ZXMQByW8ytU6KhQKEAoLaW5pdGlhdGl2ZXMQixcQAhoeCgV2aXJ1cxAHJWCD1DoqDgoKCgV2aXJ1cxC4GRACGh4KBXZpcnVzEAcljcnROioOCgoKBXZpcnVzEPMaEAIaHgoFY2FzZXMQByWgEK86Kg4KCgoFY2FzZXMQoxEQAhpuCghNaWNoaWdhbhACGg8KA21pZBIIL20vMDRycngaNwoNd2lraXBlZGlhX3VybBImaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWljaGlnYW4lciqoOioRCg0KCE1pY2hpZ2FuENEPEAEaagoHQXJpem9uYRACGjYKDXdpa2lwZWRpYV91cmwSJWh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FyaXpvbmEaDgoDbWlkEgcvbS8wdm10JXIqqDoqEAoMCgdBcml6b25hELIPEAEaJAoIdmFjY2luZXMQByVEb6I6KhEKDQoIdmFjY2luZXMQ3RMQAhoqCgt2YWNjaW5hdGlvbhAHJT9vnDoqFAoQCgt2YWNjaW5hdGlvbhDlFBACGiYKCW91dGJyZWFrcxAHJQ0ZmDoqEgoOCglvdXRicmVha3MQ+hAQAhoiCgdDYWJpbmV0EAMl0JqVOioQCgwKB0NhYmluZXQQ7hcQAhpMChxjb21tdW5pdHkgdmFjY2luYXRpb24gZXZlbnRzEAQl0JqVOiolCiEKHGNvbW11bml0eSB2YWNjaW5hdGlvbiBldmVudHMQuhcQAhocCgR3YXlzEAclooKVOioNCgkKBHdheXMQrxkQAho0ChBmb29kIHRyYW5zbWl0dGVyEAYlooKVOioZChUKEGZvb2QgdHJhbnNtaXR0ZXIQvhgQAho4ChJmb29kIGVzdGFibGlzaG1lbnQQByWma5U6KhsKFwoSZm9vZCBlc3RhYmxpc2htZW50EIcaEAIaKAoKY29ubmVjdGlvbhAHJVd3lDoqEwoPCgpjb25uZWN0aW9uEOcMEAIaMgoPc3RhdGUgb2ZmaWNpYWxzEAElxTqMOioYChQKD3N0YXRlIG9mZmljaWFscxCqERACGiYKCU9mZmljaWFscxABJfwfjDoqEgoOCglPZmZpY2lhbHMQvBMQAhogCgZoYW5kbGUQByWV4Ig6Kg8KCwoGaGFuZGxlEOwQEAIaKgoLaW5mb3JtYXRpb24QByW8woE6KhQKEAoLaW5mb3JtYXRpb24Q8hkQAhoeCgVkcnVncxAGJVV1ajoqDgoKCgVkcnVncxC1ExACGiAKBnNwcmVhZBAEJcMJVzoqDwoLCgZzcHJlYWQQpRIQAho4ChJoZXBhdGl0aXMgdmFjY2luZXMQByVK6FU6KhsKFwoSaGVwYXRpdGlzIHZhY2NpbmVzEOkSEAIaKgoLaW5mb3JtYXRpb24QByU91FU6KhQKEAoLaW5mb3JtYXRpb24Q/hEQAhooCgpwcmV2ZW50aW9uEAclTvI7OioTCg8KCnByZXZlbnRpb24QpxAQAhogCgZncm91cHMQAyUVzDs6Kg8KCwoGZ3JvdXBzEIkTEAIaIgoHZG9jdG9ycxABJRXMOzoqEAoMCgdkb2N0b3JzEIsREAIaOgoTaGVhbHRoIGNhcmUgd29ya2VycxABJRXMOzoqHAoYChNoZWFsdGggY2FyZSB3b3JrZXJzEOUREAIaJgoJcmVzb3VyY2VzEAclFcw7OioSCg4KCXJlc291cmNlcxCOEhACGkgKGkhlYWx0aCBhbmQgRmFtaWx5IFNlcnZpY2VzEAMlI8gwOiojCh8KGkhlYWx0aCBhbmQgRmFtaWx5IFNlcnZpY2VzEPoXEAEaIAoGcHVibGljEAElfRUjOioPCgsKBnB1YmxpYxDaERACIgoVZmYuQR2amZm+KgJlbnEEc2Iu'
 </annotations>
</document>