<?xml version="1.0" encoding="utf-8"?>
<document>
 <author>
  Matt McFarland, ('CNN Money',)
 </author>
 <date>
  2018-03-08T07:00:05+01:00
 </date>
 <article>
<t>
 Pull over, Uber. This self-driving truck is driving with no one on board
</t>
<d>
 A self-driving truck drives 7 miles in Florida without a human on board. The future is coming fast, and critics worry about the price of rushing.
</d>
<p>
 A startup has upped the ante in the race to develop self-driving vehicles.
</p>
<p>
 In mid-February, Starsky conducted the test on a closed portion of Route 833 in Hendry County, Florida, with no traffic.
</p>
<p>
 Starsky is the first company to publicly test an empty cabin for autonomous trucks. Its aim is to make a delivery without a human present by year's end.
</p>
<p>
 Given current regulations, Starsky Robotics CEO Stefan Seltz-Axmacher said its trucks can operate in large states such as Texas, Florida, Arizona and Nevada. Before Starsky's trucks cross state lines, more regulations are needed. An autonomous vehicle bill is currently stalled in the Senate, but it only addresses self-driving car, not trucks.
</p>
<p>
 According to Hendry County commissioner Charles Chapman, Starsky's self-driving trucks could make it easier for his airport to receive food deliveries from Central and South America for local businesses.
</p>
<p>
 "There's always a risk factor with anything that's an emerging technology," Chapman said. "We pride ourselves on taking measured risks."
</p>
<p>
 Human pilots back at Starsky's teleoperation centers pilot the trucks from highway exits to distribution centers, and vice versa. The startup chose this technique to speed up how quickly it could commercialize the technology.
</p>
<p>
 According to critics, self-driving technology may be rushed to the public without reasonable safeguards and regulations.
</p>
<p>
 "When CEOs put their own kids in a driverless car and let it take their own kids off without anyone in the car, that's how you know they're ready," Missy Cummings, an engineering professor at Duke University, told CNN.
</p>
<p>
 Cummings has called for a "vision test" for all autonomous vehicles to prove the machines can effectively identify things.
</p>
<p>
 For the test, however, Starsky concluded its vehicle was ready for public roads with a few controlled elements, such as no traffic and a carefully selected spot.
</p>
<p>
 "If we swerved off the road, it wouldn't be swerving into a concrete barrier or a school bus," Seltz-Axmacher told CNN of the location choice. "[If something happened], it would have swerved into a swamp."
</p>
 </article>
 <annotations>
  b''
 </annotations>
</document>