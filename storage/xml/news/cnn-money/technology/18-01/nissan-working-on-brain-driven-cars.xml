<?xml version="1.0" encoding="utf-8"?>
<document>
 <author>
  Peter Valdes-Dapena, ('CNN Money',)
 </author>
 <date>
  2018-01-03T12:37:50+01:00
 </date>
 <article>
<t>
 Nissan working on brain-driven cars
</t>
<d>
 Brainwave-sensing technology could be used to predict a driver's actions or expectations.
</d>
<p>
 Lots of companies are working on cars that drive themselves using computers. Nissan engineers are working to put your brain back into the process but without, necessarily, involving your hands and feet.
</p>
<p>
 They're researching technology that uses brainwave-sensors to detect what a driver intends to do in the next fraction of a second or, in a self-driving car, what he expects the car to do.
</p>
<p>
 In a human-driven car, the so-called brain-to-vehicle technology could shorten reaction times. Sensors could detect, for example, the driver's intention to slam on the brakes. The brakes could then be applied immediately, even before the driver's foot has touched the brake pedal.
</p>
<p>
 Researchers are also looking at brain waves when the car does something the driver did not expect. That information could be used to make autonomously-driving cars less unnerving for occupants by having the car behave, as much as possible, the way the driver would.
</p>
<p>
 The technology could also be used to adjust things like the car's internal temperature and seat positions to automatically make occupants more comfortable.
</p>
<p>
 Research subjects wear helmet-like devices that detect brain wave activity. By reading brain activity, cars can take actions -- like turning the steering wheel or braking -- up to half a second sooner than the driver could do it on his or her own.
</p>
 </article>
 <annotations>
  b'gANjZ29vZ2xlLmNsb3VkLmxhbmd1YWdlX3YxLnR5cGVzCkFubm90YXRlVGV4dFJlc3BvbnNlCnEAKVJxAX1xAlgKAAAAc2VyaWFsaXplZHEDQns3AAAKmAEKiQEKhgE8dD5OaXNzYW4gd29ya2luZyBvbiBicmFpbi1kcml2ZW4gY2FyczwvdD48ZD5CcmFpbndhdmUtc2Vuc2luZyB0ZWNobm9sb2d5IGNvdWxkIGJlIHVzZWQgdG8gcHJlZGljdCBhIGRyaXZlcidzIGFjdGlvbnMgb3IgZXhwZWN0YXRpb25zLhIKFc3MzD4dzczMPgpcClgKUzwvZD48cD5Mb3RzIG9mIGNvbXBhbmllcyBhcmUgd29ya2luZyBvbiBjYXJzIHRoYXQgZHJpdmUgdGhlbXNlbHZlcyB1c2luZyBjb21wdXRlcnMuEIcBEgAK1QIKxgIKwAJOaXNzYW4gZW5naW5lZXJzIGFyZSB3b3JraW5nIHRvIHB1dCB5b3VyIGJyYWluIGJhY2sgaW50byB0aGUgcHJvY2VzcyBidXQgd2l0aG91dCwgbmVjZXNzYXJpbHksIGludm9sdmluZyB5b3VyIGhhbmRzIGFuZCBmZWV0LjwvcD48cD4gVGhleSdyZSByZXNlYXJjaGluZyB0ZWNobm9sb2d5IHRoYXQgdXNlcyBicmFpbndhdmUtc2Vuc29ycyB0byBkZXRlY3Qgd2hhdCBhIGRyaXZlciBpbnRlbmRzIHRvIGRvIGluIHRoZSBuZXh0IGZyYWN0aW9uIG9mIGEgc2Vjb25kIG9yLCBpbiBhIHNlbGYtZHJpdmluZyBjYXIsIHdoYXQgaGUgZXhwZWN0cyB0aGUgY2FyIHRvIGRvLhDbARIKFZqZmT4dmpmZvgp5CmsKZjwvcD48cD4gSW4gYSBodW1hbi1kcml2ZW4gY2FyLCB0aGUgc28tY2FsbGVkIGJyYWluLXRvLXZlaGljbGUgdGVjaG5vbG9neSBjb3VsZCBzaG9ydGVuIHJlYWN0aW9uIHRpbWVzLhCcBBIKFc3MzD0dzczMvQpZClUKUFNlbnNvcnMgY291bGQgZGV0ZWN0LCBmb3IgZXhhbXBsZSwgdGhlIGRyaXZlcidzIGludGVudGlvbiB0byBzbGFtIG9uIHRoZSBicmFrZXMuEIMFEgAKewptCmhUaGUgYnJha2VzIGNvdWxkIHRoZW4gYmUgYXBwbGllZCBpbW1lZGlhdGVseSwgZXZlbiBiZWZvcmUgdGhlIGRyaXZlcidzIGZvb3QgaGFzIHRvdWNoZWQgdGhlIGJyYWtlIHBlZGFsLhDUBRIKFc3MTD4dzcxMvgp9Cm8KajwvcD48cD4gUmVzZWFyY2hlcnMgYXJlIGFsc28gbG9va2luZyBhdCBicmFpbiB3YXZlcyB3aGVuIHRoZSBjYXIgZG9lcyBzb21ldGhpbmcgdGhlIGRyaXZlciBkaWQgbm90IGV4cGVjdC4QvQYSChXNzMw+Hc3MzL4KuwEKrAEKpgFUaGF0IGluZm9ybWF0aW9uIGNvdWxkIGJlIHVzZWQgdG8gbWFrZSBhdXRvbm9tb3VzbHktZHJpdmluZyBjYXJzIGxlc3MgdW5uZXJ2aW5nIGZvciBvY2N1cGFudHMgYnkgaGF2aW5nIHRoZSBjYXIgYmVoYXZlLCBhcyBtdWNoIGFzIHBvc3NpYmxlLCB0aGUgd2F5IHRoZSBkcml2ZXIgd291bGQuEKgHEgoVzczMPR3NzMw9Cq4BCqkBCqMBPC9wPjxwPiBUaGUgdGVjaG5vbG9neSBjb3VsZCBhbHNvIGJlIHVzZWQgdG8gYWRqdXN0IHRoaW5ncyBsaWtlIHRoZSBjYXIncyBpbnRlcm5hbCB0ZW1wZXJhdHVyZSBhbmQgc2VhdCBwb3NpdGlvbnMgdG8gYXV0b21hdGljYWxseSBtYWtlIG9jY3VwYW50cyBtb3JlIGNvbWZvcnRhYmxlLhDPCBIAClwKWApTPC9wPjxwPiBSZXNlYXJjaCBzdWJqZWN0cyB3ZWFyIGhlbG1ldC1saWtlIGRldmljZXMgdGhhdCBkZXRlY3QgYnJhaW4gd2F2ZSBhY3Rpdml0eS4Q8wkSAArAAQqxAQqrAUJ5IHJlYWRpbmcgYnJhaW4gYWN0aXZpdHksIGNhcnMgY2FuIHRha2UgYWN0aW9ucyAtLSBsaWtlIHR1cm5pbmcgdGhlIHN0ZWVyaW5nIHdoZWVsIG9yIGJyYWtpbmcgLS0gdXAgdG8gaGFsZiBhIHNlY29uZCBzb29uZXIgdGhhbiB0aGUgZHJpdmVyIGNvdWxkIGRvIGl0IG9uIGhpcyBvciBoZXIgb3duLhDHChIKFc3MzD4dzczM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'
 </annotations>
</document>