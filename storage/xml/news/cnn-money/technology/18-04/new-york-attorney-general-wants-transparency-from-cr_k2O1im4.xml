<?xml version="1.0" encoding="utf-8"?>
<document>
 <author>
  Aaron Smith, ('CNN Money',)
 </author>
 <date>
  2018-04-17T02:54:54+01:00
 </date>
 <article>
<t>
 New York attorney general wants 'transparency' from crypto exchanges
</t>
<d>
 New York Attorney General Eric Schneiderman reached out to 13 trading platforms for bitcoin and other cryptocurrencies including Coinbase, seeking transparency.
</d>
<p>
 Schneiderman said on Tuesday that his office reached out to 13 trading platforms, including the popular Coinbase, seeking information on their operations, internal controls, and safeguards for investors.
</p>
<p>
 "With cryptocurrency on the rise, consumers in New York and across the country have a right to transparency and accountability when they invest their money. Yet too often, consumers don't have the basic facts they need to assess the fairness, integrity, and security of these trading platforms," said Schneiderman in a statement.
</p>
<p>
 The attorney general's office mentioned past problems with exchanges that trade digital currency, including "reports of the theft of vast sums of virtual currency from customer accounts," as well as outages, "possible market manipulation," and difficulty withdrawing funds.
</p>
<p>
 Coinbase did not immediately respond to an email from CNNMoney.
</p>
<p>
 Digital currencies are not backed by any government, allowing the exchanges that trade them to avoid federal scrutiny, though that is changing.
</p>
<p>
 The SEC's newly created Cyber Unit also started going after "pump and dump" schemes where fraudsters lure investors, take their money, and run.
</p>
<p>
 In Asia, the epicenter of cryptocurrency trading, China and South Korea have both cracked down on digital currency trading.
</p>
 </article>
 <annotations>
  b''
 </annotations>
</document>